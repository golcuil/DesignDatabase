
Now that we have the concept of a DbConnection, let’s work out how to represent a DbCommand.
Design a class called DbCommand for executing an instruction against the database. A DbCommand cannot be in a valid state without having a connection. So in the constructor of this class, pass a DbConnection. Don’t forget to cater for the null.
Each DbCommand should also have the instruction to be sent to the database. In case of SQL Server, this instruction is expressed in T-SQL language. 
Use a string to represent this instruction. Again, a command cannot be in a valid state without this instruction.
So make sure to receive it in the constructor and cater for the null reference or an empty string.
Each command should be executable. So we need to create a method called Execute(). 
In this method, we need a simple implementation as follows:
Open the connection Run the instruction Close the connection
Note that here, inside the DbCommand, we have a reference to DbConnection. 
Depending on the type of DbConnection sent at runtime, opening and closing a connection will be different. 
For example, if we initialize this DbCommand with a SqlConnection, we will open and close a connection to a Sql Server database. 
This is polymorphism. 
